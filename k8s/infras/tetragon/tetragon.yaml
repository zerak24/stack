tetragon:
  enabled: true
  image:
    override: ~
    repository: quay.io/cilium/tetragon
    tag: v1.1.2
  resources: {}
  extraArgs: {}
  extraEnv: []
  # extraEnv:
  #   - name: foo
  #     value: bar
  extraVolumeMounts: []
  securityContext:
    privileged: true
  # -- Overrides the default livenessProbe for the tetragon container.
  livenessProbe: {}
  #  grpc:
  #    port: 54321

  # Tetragon puts processes in an LRU cache. The cache is used to find ancestors
  # for subsequently exec'ed processes.
  processCacheSize: 65536
  # JSON export filename. Set it to an empty string to disable JSON export altogether.
  exportFilename: tetragon.log
  # JSON export file permissions as a string. Set it to "600" to restrict access to owner.
  exportFilePerm: "600"
  # Size in megabytes at which to rotate JSON export files.
  exportFileMaxSizeMB: 10
  # Number of rotated files to retain.
  exportFileMaxBackups: 5
  # Compress rotated JSON export files.
  exportFileCompress: true
  # Rate-limit event export (events per minute), Set to -1 to export all events.
  exportRateLimit: -1
  # Allowlist for JSON export. For example, to export only process_connect events from
  # the default namespace:
  #
  # exportAllowList: |
  #   {"namespace":["default"],"event_set":["PROCESS_EXEC"]}
  exportAllowList: |-
    {"event_set":["PROCESS_EXEC", "PROCESS_EXIT", "PROCESS_KPROBE", "PROCESS_UPROBE", "PROCESS_TRACEPOINT"]}
  # Denylist for JSON export. For example, to exclude exec events that look similar to
  # Kubernetes health checks and all the events from kube-system namespace and the host:
  #
  # exportDenyList: |
  #   {"health_check":true}
  #   {"namespace":["kube-system",""]}
  #
  exportDenyList: |-
    {"health_check":true}
    {"namespace":["", "log", "tetragon", "kube-system"]}
  # Filters to include or exclude fields from Tetragon events. Without any filters, all
  # fields are included by default. The presence of at least one inclusion filter implies
  # default-exclude (i.e. any fields that don't match an inclusion filter will be
  # excluded). Field paths are expressed using dot notation like "a.b.c" and multiple
  # field paths can be separated by commas like "a.b.c,d,e.f". An optional "event_set" may
  # be specified to apply the field filter to a specific set of events.
  #
  # For example, to exclude the "parent" field from all events and include the "process"
  # field in PROCESS_KPROBE events while excluding all others:
  #
  # fieldFilters: |
  #   {"fields": "parent", "action": "EXCLUDE"}
  #   {"event_set": ["PROCESS_KPROBE"], "fields": "process", "action": "INCLUDE"}
  #
  fieldFilters: '{"fields":"process.cwd,process.binary,process.arguments,process.flags,process.start_time,process.pod"}'
  # Filters to redact secrets from the args fields in Tetragon events. To perform
  # redactions, redaction filters define RE2 regular expressions in the `redact`
  # field. Any capture groups in these RE2 regular expressions are redacted and
  # replaced with "*****".
  #
  # For more control, you can select which binary or binaries should have their
  # arguments redacted with the `binary_regex` field.
  #
  # NOTE: This feature uses RE2 as its regular expression library. Make sure that you follow
  # RE2 regular expression guidelines as you may observe unexpected results otherwise.
  # More information on RE2 syntax can be found [here](https://github.com/google/re2/wiki/Syntax).
  #
  # NOTE: When writing regular expressions in JSON, it is important to escape
  # backslash characters. For instance `\Wpasswd\W?` would be written as
  # `{"redact": "\\Wpasswd\\W?"}`.
  #
  # As a concrete example, the following will redact all passwords passed to
  # processes with the "--password" argument:
  #
  #   {"redact": ["--password(?:\\s+|=)(\\S*)"]}
  #
  # Now, an event which contains the string "--password=foo" would have that
  # string replaced with "--password=*****".
  #
  # Suppose we also see some passwords passed via the -p shorthand for a specific binary, foo.
  # We can also redact these as follows:
  #
  #   {"binary_regex": ["(?:^|/)foo$"], "redact": ["-p(?:\\s+|=)(\\S*)"]}
  #
  # With both of the above redaction filters in place, we are now redacting all
  # password arguments.
  redactionFilters: '{"redact": ["--password(?:\\s+|=)(\\S*)","-p(?:\\s+|=)(\\S*)"]}'

# -- Tetragon Operator settings
tetragonOperator:
  # -- Enables the Tetragon Operator.
  enabled: false

# -- Tetragon event settings
export:
  # "stdout". "" to disable.
  mode: ""
